# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

import greeter_pb2 as greeter__pb2

GRPC_GENERATED_VERSION = "1.70.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in greeter_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class GreeterStub(object):
    """Greeter service.
    This is a simple example of a service that greets you.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
            "/greeter.v1.Greeter/SayHello",
            request_serializer=greeter__pb2.HelloRequest.SerializeToString,
            response_deserializer=greeter__pb2.HelloReply.FromString,
            _registered_method=True,
        )


class GreeterServicer(object):
    """Greeter service.
    This is a simple example of a service that greets you.
    """

    def SayHello(self, request, context):
        """Says hello to the user.

        Args:
        request (HelloRequest): The request message.

        Returns:
        HelloReply: The reply message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SayHello": grpc.unary_unary_rpc_method_handler(
            servicer.SayHello,
            request_deserializer=greeter__pb2.HelloRequest.FromString,
            response_serializer=greeter__pb2.HelloReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "greeter.v1.Greeter", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("greeter.v1.Greeter", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Greeter service.
    This is a simple example of a service that greets you.
    """

    @staticmethod
    def SayHello(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/greeter.v1.Greeter/SayHello",
            greeter__pb2.HelloRequest.SerializeToString,
            greeter__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
